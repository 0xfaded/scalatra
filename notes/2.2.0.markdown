### Global

* Removes jerkson support
* Removes anti-xml support
* Adds Jackson support
* Adds common traits for pluggable json serialization, these traits allow library writers to write against a generic
  json interface. The application developer can then mix in the json support he wants and retain all functionality.
* Defers reading request parameters until the last responsible moment (aka lazify)
* Contrib project has been removed, all the modules have been moved into the main scalatra project

### Core
* Adds typed param support, previously in contrib
* ApiFormats now also has a method responseFormat which looks at the content type of the response and falls back to the format of the request.
* The default bootstrap file is renamed from `Scalatra` to `ScalatraBootstrap`
* FileUpload can now be configured through init parameters
* RouteMatchers don't use any by-name params anymore
* RouteMatcher now takes a requestPath as a param to the apply method

### lift-json
* removed for json4s support

### Jackson
* removed for json4s support

### JSON
* previous lift-json support is replaced with json4s support.
* Jackson integration is also provided through json4s
* Replaces ProductToJsonSupport trait with a `JValueResult` trait which will try to serialize any value to json or xml
  when the accept headers or format parameter indicate the user wants json or xml.

### Scalate
* Adds ScalateRenderSupport trait taken from contrib

### Databinding
* Adds a databinding module for commands.
  The commands can have validations attached and will read data from headers, params and the request body (like json/xml)
  This is implemented using an infrastructure of type classes and uses scalaz validations to capture the validation information.

        class RegisterForm extends JacksonCommand { // you have to pick the json library of choice

          val login: Field[String] = asString("login").required.notBlank.minLength(6).validForFormat("\\w+".r)

          val name: Field[String] = asString("name")

          val email: Field[String] = asString("email").required.notBlank.validEmail

          val homepage: Field[String] = asString("homepage").validUrl

          val passwordConfirmation: FieldBinding = asString("passwordConfirmation").required.notBlank

          val password: FieldBinding = asString("password").required.notBlank.validConfirmation("passwordConfirmation", passwordConfirmation.value)

        }

### Swagger
* Added serialization for AllowableValues in `Swagger.scala`.  These are passed as strings in the AllowableValues object:
```scala
// as List
allowableValues = AllowableValues("LIST[1,2,3]")

// as range
allowableValues = AllowableValues("RANGE[0,1000]")
```

* Updated to support the [swagger-1.1 spec](https://github.com/wordnik/swagger-core/wiki/API-Declaration)
* Allows for using either jackson or native json to generate the service description json
* Auto-registers servlets and filters that extend the SwaggerSupport trait in the swagger manager.
