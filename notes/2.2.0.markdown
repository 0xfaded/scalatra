### Global

* Removes jerkson support
* Removes anti-xml support
* Adds Jackson support
* Adds common traits for pluggable json serialization, these traits allow library writers to write against a generic
  json interface. The application developer can then mix in the json support he wants and retain all functionality.
* Defers reading request parameters until the last responsible moment (aka lazify)
* Contrib project has been removed, all the modules have been moved into the main scalatra project

### Core
* Adds typed param support, previously in contrib
* ApiFormats now also has a method responseFormat which looks at the content type of the response and falls back to the format of the request.
* The default bootstrap file is renamed from `Scalatra` to `ScalatraBootstrap`
* FileUpload can now be configured through init parameters
* RouteMatchers don't use any by-name params anymore
* RouteMatcher now takes a requestPath as a param to the apply method
* You are able to mount the same servlet more than once in the ScalatraBootstrap class
* Added a new `relativeUrl` method which will compose a path for redirection and keep relative paths relative
* Refactored the `url` method to allow for a more granular building of the path with regards to the context path and servlet path
* Added a `fullUrl` method which will use the absolute path created by the `url` method to build a url with protocol, host, port and path + querystring
* Added a `isHttps` method which also looks in the headers for a X-Forwarded-Proto header
* Added a `needsHttps` method which looks in the init params for a key `org.scalatra.ForceHttps` for a boolean value (true/false), this is used by the `fullUrl` method to work out the protocol
* Added a `org.scalatra.HostName` init parameter in which you can override the host name of this scalatra application, if unset the value from `request.getServerName` will be used
* Added a `org.scalatra.Port` init parameter in which you can override the port of this scalatra application, if unset the value from `request.getServerPort` will be used

### lift-json
* removed for json4s support

### Jackson
* removed for json4s support

### JSON
* previous lift-json support is replaced with json4s support.
* Jackson integration is also provided through json4s
* Replaces ProductToJsonSupport trait with a `JValueResult` trait which will try to serialize any value to json or xml
  when the accept headers or format parameter indicate the user wants json or xml.

### Scalate
* Adds ScalateRenderSupport trait taken from contrib

### Databinding
* Adds a databinding module for commands.
  The commands can have validations attached and will read data from headers, params and the request body (like json/xml)
  This is implemented using an infrastructure of type classes and uses scalaz validations to capture the validation information.

        class RegisterForm extends JacksonCommand { // you have to pick the json library of choice

          val login: Field[String] = asString("login").required.notBlank.minLength(6).validForFormat("\\w+".r)

          val name: Field[String] = asString("name")

          val email: Field[String] = asString("email").required.notBlank.validEmail

          val homepage: Field[String] = asString("homepage").validUrl

          val passwordConfirmation: FieldBinding = asString("passwordConfirmation").required.notBlank

          val password: FieldBinding = asString("password").required.notBlank.validConfirmation("passwordConfirmation", passwordConfirmation.value)

        }

### Atmosphere
* Adds an atmosphere integration
  This module adds support for websockets, long-polling, server-side events, ....
  
        class MyAtmoServlet {
          def receive = {
            case Connected =>
            case Disconnected(disconnector, Some(error)) =>
            case Error(Some(error)) =>
            case TextMessage(text) => send("ECHO: " + text)
            case JsonMessage(json) => broadcast(json)
          }
        }

### Swagger
* Added serialization for AllowableValues in `Swagger.scala`.  These are passed as strings in the AllowableValues object:

        // as List
        allowableValues = AllowableValues(1, 2, 3)
        
        // as range
        allowableValues = AllowableValues(0 to 1000)

* Updated to support the [swagger-1.1 spec](https://github.com/wordnik/swagger-core/wiki/API-Declaration)
* Allows for using either jackson or native json to generate the service description json
* Auto-registers servlets and filters that extend the SwaggerSupport trait in the swagger manager.
* Includes the swagger-core and swagger-annotations jars as transitive dependencies (batteries included)
* the models property in the `SwaggerSupport` can now be Set as `Map(classOf[Pet])`
* responseClass can now be set with a type annotation `responseClass[Pet]`

### Swagger-Ext

* Adds support for authorization to Swagger.  Shows only actions a user is allowed to see.

### Testing
* Added a method `ensureSessionIsSerializable` method which will try to serialize every session value.

### Auth
* Scentry is now lazily initialized so the order of the traits doesn't matter anymore
